/** TO BE OVERWRITTEN IN CHILD TEMPLATE **/


readyWhereClause(owner) ::= <<
>>


readyOrderByClause() ::= <<
>>

extraFieldsWithComma() ::= <<
>>


extraValuesWithComma() ::= <<
>>

/** FIELDS **/

baseFieldsNoRecordId() ::= <<
      class_name
      , event_json
      , user_token
      , created_date
>>

baseFields() ::= <<
     record_id
      , <baseFieldsNoRecordId()>
>>

lifeCycleFieldsWithComma() ::= <<
      , creating_owner
      , processing_owner
      , processing_available_date
      , processing_state
      , error_count
>>

searchFieldsWithComma() ::= <<
      , search_key1
      , search_key2
>>


allTableFieldsNoRecordId() ::= <<
      <baseFieldsNoRecordId()>
      <lifeCycleFieldsWithComma()>
      <searchFieldsWithComma()>
      <extraFieldsWithComma()>
>>

allTableFields() ::= <<
      <baseFields()>
      <lifeCycleFieldsWithComma()>
      <searchFieldsWithComma()>
      <extraFieldsWithComma()>
>>

/** VALUES **/

baseValuesNoRecordId() ::= <<
      :className
      , :eventJson
      , :userToken
      , :createdDate
>>

baseValues() ::= <<
     :recordId
     , <baseValuesNoRecordId()>
>>

lifeCycleValuesWithComma() ::= <<
      , :creatingOwner
      , :processingOwner
      , :processingAvailableDate
      , :processingState
      , :errorCount
>>

searchValuesWithComma() ::= <<
      , :searchKey1
      , :searchKey2
>>

allTableValuesNoRecordId() ::= <<
      <baseValuesNoRecordId()>
      <lifeCycleValuesWithComma()>
      <searchValuesWithComma()>
      <extraValuesWithComma()>
>>

allTableValues() ::= <<
      <baseValues()>
      <lifeCycleValuesWithComma()>
      <searchValuesWithComma()>
      <extraValuesWithComma()>
>>

getMaxRecordId(tableName) ::= <<
    select max(record_id)
    from <tableName>
    ;
>>

getByRecordId(tableName) ::= <<
    select
      <allTableFields()>
    from <tableName>
    where
    record_id = :recordId
    ;
>>


/** QUERIES **/

getEntriesFromIds(tableName, record_ids) ::= <<
    select
      <allTableFields()>
    from <tableName>
    where
      record_id in (<record_ids>)
    order by
      <readyOrderByClause()>
    ;
>>

getReadyEntries(owner, tableName) ::= <<
    select
      <allTableFields()>
    from <tableName>
    where
      <readyWhereClause(owner)>
    order by
      <readyOrderByClause()>
    limit :max
    ;
>>

getNbReadyEntries(owner, tableName) ::= <<
    select
      count(*)
    from <tableName>
    where
      <readyWhereClause(owner)>
    ;
>>

getInProcessingEntries(tableName) ::= <<
    select
      <allTableFields()>
    from <tableName>
    where
      processing_state = 'IN_PROCESSING'
    order by
      <readyOrderByClause()>
    ;
>>

getEntriesLeftBehind(tableName) ::= <<
    select
      <allTableFields()>
    from <tableName>
    where
      <reapWhereClause()>
    order by created_date asc
    limit :max;
>>

claimEntry(tableName) ::= <<
    update <tableName>
    set
      processing_owner = :owner
      , processing_available_date = :nextAvailable
      , processing_state = 'IN_PROCESSING'
    where
      record_id = :recordId
      and processing_state != 'PROCESSED'
      and processing_state != 'REMOVED'
      and processing_owner IS NULL
    ;
>>

claimEntries(tableName, record_ids) ::= <<
    update <tableName>
    set
      processing_owner = :owner
      , processing_available_date = :nextAvailable
      , processing_state = 'IN_PROCESSING'
    where
      record_id in (<record_ids>)
      and processing_state != 'PROCESSED'
      and processing_state != 'REMOVED'
      and processing_owner IS NULL
    ;
>>

updateOnError(tableName) ::= <<
    update <tableName>
    set
      processing_owner = NULL
      , processing_available_date = :now
      , processing_state = 'AVAILABLE'
      , error_count = :errorCount
    where
      record_id = :recordId
    ;
>>

removeEntry(tableName) ::= <<
    delete from <tableName>
    where
      record_id = :recordId
    ;
>>

removeEntries(tableName, record_ids) ::= <<
    delete from <tableName>
    where
      record_id in (<record_ids>)
    ;
>>


insertEntry(tableName) ::= <<
    insert into <tableName> (
       <allTableFieldsNoRecordId()>
    ) values (
       <allTableValuesNoRecordId()>
    );
>>


insertEntries(tableName) ::= <<
    insert into <tableName> (
       <allTableFieldsNoRecordId()>
    ) values (
       <allTableValuesNoRecordId()>
    )
>>

